#!/usr/bin/env python3
"""
Script de valida√ß√£o de ambiente para WhatsApp AI Agent com MEGA API
Verifica se todas as vari√°veis de ambiente necess√°rias est√£o configuradas
"""

import os
from dotenv import load_dotenv

def validate_environment():
    """Valida todas as vari√°veis de ambiente necess√°rias"""
    
    # Carrega vari√°veis do arquivo .env
    load_dotenv()
    
    print("üîç Validando configura√ß√µes de ambiente...\n")
    
    # Vari√°veis obrigat√≥rias
    required_vars = {
        'SECRET_KEY': 'Chave secreta do Flask',
        'FLASK_ENV': 'Ambiente do Flask',
        'FLASK_DEBUG': 'Debug do Flask',
        'PORT': 'Porta do servidor',
        'MEGA_API_TOKEN': 'Token da MEGA API',
        'MEGA_API_URL': 'URL da MEGA API'
    }
    
    # Vari√°veis opcionais (para futuras integra√ß√µes)
    optional_vars = {
        'WEBHOOK_URL': 'URL do webhook para receber mensagens',
        'WHATSAPP_PHONE_NUMBER_ID': 'ID do n√∫mero do WhatsApp (se necess√°rio)'
    }
    
    all_valid = True
    
    # Verifica vari√°veis obrigat√≥rias
    print("üìã VARI√ÅVEIS OBRIGAT√ìRIAS:")
    for var, description in required_vars.items():
        value = os.getenv(var)
        if value:
            # Mascarar valores sens√≠veis
            if 'KEY' in var or 'TOKEN' in var:
                display_value = f"{value[:8]}...{value[-8:]}" if len(value) > 16 else "***"
            else:
                display_value = value
            print(f"  ‚úÖ {var}: {display_value} ({description})")
        else:
            print(f"  ‚ùå {var}: N√ÉO CONFIGURADA ({description})")
            all_valid = False
    
    print("\nüìã VARI√ÅVEIS OPCIONAIS:")
    for var, description in optional_vars.items():
        value = os.getenv(var)
        if value and value != "your_webhook_url_here":
            if 'URL' in var:
                display_value = value
            else:
                display_value = f"{value[:8]}...{value[-8:]}" if len(value) > 16 else "***"
            print(f"  ‚úÖ {var}: {display_value} ({description})")
        else:
            print(f"  ‚ö†Ô∏è  {var}: N√ÉO CONFIGURADA ({description})")
    
    # Valida√ß√µes espec√≠ficas
    print("\nüîß VALIDA√á√ïES ESPEC√çFICAS:")
    
    # Validar SECRET_KEY
    secret_key = os.getenv('SECRET_KEY')
    if secret_key and len(secret_key) >= 32:
        print(f"  ‚úÖ SECRET_KEY tem comprimento adequado ({len(secret_key)} caracteres)")
    elif secret_key:
        print(f"  ‚ö†Ô∏è  SECRET_KEY muito curta ({len(secret_key)} caracteres, recomendado: 32+)")
    
    # Validar MEGA_API_URL
    mega_url = os.getenv('MEGA_API_URL')
    if mega_url and mega_url.startswith('https://'):
        print(f"  ‚úÖ MEGA_API_URL v√°lida (HTTPS)")
    elif mega_url:
        print(f"  ‚ö†Ô∏è  MEGA_API_URL sem HTTPS")
    
    # Validar PORT
    port = os.getenv('PORT')
    if port and port.isdigit():
        port_num = int(port)
        if 1000 <= port_num <= 65535:
            print(f"  ‚úÖ PORT v√°lida ({port})")
        else:
            print(f"  ‚ö†Ô∏è  PORT fora do range recomendado ({port})")
    
    # Resultado final
    print("\n" + "="*50)
    if all_valid:
        print("üéâ CONFIGURA√á√ÉO B√ÅSICA V√ÅLIDA!")
        print("‚úÖ Todas as vari√°veis obrigat√≥rias est√£o configuradas.")
        print("üìù Configure as vari√°veis opcionais quando necess√°rio.")
    else:
        print("‚ùå CONFIGURA√á√ÉO INCOMPLETA!")
        print("üîß Configure as vari√°veis marcadas como ‚ùå antes de continuar.")
    
    return all_valid

if __name__ == "__main__":
    validate_environment()